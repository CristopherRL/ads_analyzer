#!/usr/bin/env python3
"""
Script simple para probar conectividad SSL a Facebook.
√ötil para diagnosticar problemas de red/SSL.
"""

import ssl
import socket
import requests
import urllib3
from urllib.parse import urlparse

# Deshabilitar warnings SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def test_ssl_connection(hostname, port=443):
    """Probar conexi√≥n SSL b√°sica"""
    print(f"üîí Probando conexi√≥n SSL a {hostname}:{port}")
    
    try:
        # Crear contexto SSL
        context = ssl.create_default_context()
        
        # Conectar
        with socket.create_connection((hostname, port), timeout=10) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                print(f"‚úÖ Conexi√≥n SSL exitosa")
                print(f"   Protocolo: {ssock.version()}")
                print(f"   Cipher: {ssock.cipher()}")
                return True
                
    except ssl.SSLError as e:
        print(f"‚ùå Error SSL: {e}")
        return False
    except socket.timeout:
        print(f"‚ùå Timeout de conexi√≥n")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_http_request(url, verify_ssl=True):
    """Probar petici√≥n HTTP"""
    print(f"üåê Probando petici√≥n HTTP a {url}")
    
    try:
        response = requests.get(url, timeout=10, verify=verify_ssl)
        print(f"‚úÖ Petici√≥n exitosa - Status: {response.status_code}")
        return True
    except requests.exceptions.SSLError as e:
        print(f"‚ùå Error SSL en petici√≥n: {e}")
        return False
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîß Script de Diagn√≥stico SSL/Conectividad")
    print("=" * 50)
    
    # Probar conectividad SSL b√°sica
    ssl_ok = test_ssl_connection("graph.facebook.com")
    
    print()
    
    # Probar petici√≥n HTTP con SSL
    http_ssl_ok = test_http_request("https://graph.facebook.com/v19.0/me", verify_ssl=True)
    
    print()
    
    # Probar petici√≥n HTTP sin verificar SSL
    http_no_ssl_ok = test_http_request("https://graph.facebook.com/v19.0/me", verify_ssl=False)
    
    print()
    print("=" * 50)
    print("üìã RESUMEN:")
    print(f"   SSL B√°sico: {'‚úÖ OK' if ssl_ok else '‚ùå ERROR'}")
    print(f"   HTTP con SSL: {'‚úÖ OK' if http_ssl_ok else '‚ùå ERROR'}")
    print(f"   HTTP sin SSL: {'‚úÖ OK' if http_no_ssl_ok else '‚ùå ERROR'}")
    
    if not ssl_ok:
        print("\nüí° SOLUCIONES:")
        print("   1. Actualizar certificados SSL del sistema")
        print("   2. Verificar configuraci√≥n de proxy")
        print("   3. Usar VPN si est√°s en red corporativa")
        print("   4. Configurar variables de entorno:")
        print("      set SSL_VERIFY=False")
        print("      set REQUESTS_CA_BUNDLE=")
    
    if http_no_ssl_ok and not http_ssl_ok:
        print("\nüí° El problema es espec√≠fico de verificaci√≥n SSL")
        print("   Puedes usar la aplicaci√≥n con SSL deshabilitado")

if __name__ == "__main__":
    main()
