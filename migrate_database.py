#!/usr/bin/env python3
"""
Script de migraci√≥n de base de datos para implementar todas las mejoras.
Ejecuta todas las migraciones en orden correcto.
"""

import os
import sys
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

def run_migration():
    """Ejecuta la migraci√≥n completa de la base de datos."""
    
    print("üöÄ Iniciando Migraci√≥n de Base de Datos")
    print("=" * 50)
    
    # Obtener configuraci√≥n de base de datos desde variables de entorno
    db_config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': os.getenv('DB_PORT', '5432'),
        'database': os.getenv('DB_NAME', 'ads_analyzer'),
        'user': os.getenv('DB_USER', 'postgres'),
        'password': os.getenv('DB_PASSWORD', '')
    }
    
    try:
        # Conectar a la base de datos
        print("1. Conectando a la base de datos...")
        conn = psycopg2.connect(**db_config)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        print("   ‚úÖ Conexi√≥n establecida")
        
        # Leer y ejecutar script de migraci√≥n
        print("2. Ejecutando script de migraci√≥n...")
        migration_file = "docs/internal/queries/migration_complete.sql"
        
        if not os.path.exists(migration_file):
            print(f"   ‚ùå Error: No se encontr√≥ el archivo {migration_file}")
            return False
        
        with open(migration_file, 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        # Ejecutar el script SQL
        cursor.execute(migration_sql)
        print("   ‚úÖ Script de migraci√≥n ejecutado")
        
        # Verificar que las tablas se crearon correctamente
        print("3. Verificando tablas creadas...")
        
        tables_to_check = [
            'model_pricing',
            'user_facebook_accounts', 
            'analysis_results'
        ]
        
        for table in tables_to_check:
            cursor.execute(f"SELECT COUNT(*) FROM information_schema.tables WHERE table_name = '{table}'")
            exists = cursor.fetchone()[0] > 0
            if exists:
                print(f"   ‚úÖ Tabla {table}: Creada")
            else:
                print(f"   ‚ùå Tabla {table}: No encontrada")
                return False
        
        # Verificar campos nuevos en conversation_history
        print("4. Verificando campos nuevos en conversation_history...")
        new_fields = ['full_prompt_sent', 'llm_params', 'tokens_used', 'estimated_cost_usd']
        
        for field in new_fields:
            cursor.execute(f"""
                SELECT COUNT(*) FROM information_schema.columns 
                WHERE table_name = 'conversation_history' AND column_name = '{field}'
            """)
            exists = cursor.fetchone()[0] > 0
            if exists:
                print(f"   ‚úÖ Campo {field}: Agregado")
            else:
                print(f"   ‚ùå Campo {field}: No encontrado")
                return False
        
        # Verificar que facebook_account_id fue eliminado de api_cache
        print("5. Verificando limpieza de api_cache...")
        cursor.execute("""
            SELECT COUNT(*) FROM information_schema.columns 
            WHERE table_name = 'api_cache' AND column_name = 'facebook_account_id'
        """)
        exists = cursor.fetchone()[0] > 0
        if not exists:
            print("   ‚úÖ Columna facebook_account_id eliminada de api_cache")
        else:
            print("   ‚ö†Ô∏è Columna facebook_account_id todav√≠a existe en api_cache")
        
        # Verificar que user_id fue eliminado de facebook_accounts
        print("6. Verificando limpieza de facebook_accounts...")
        cursor.execute("""
            SELECT COUNT(*) FROM information_schema.columns 
            WHERE table_name = 'facebook_accounts' AND column_name = 'user_id'
        """)
        exists = cursor.fetchone()[0] > 0
        if not exists:
            print("   ‚úÖ Columna user_id eliminada de facebook_accounts")
        else:
            print("   ‚ö†Ô∏è Columna user_id todav√≠a existe en facebook_accounts")
        
        # Verificar datos de precios
        print("7. Verificando datos de precios...")
        cursor.execute("SELECT COUNT(*) FROM model_pricing")
        pricing_count = cursor.fetchone()[0]
        print(f"   ‚úÖ {pricing_count} registros de precios insertados")
        
        print("\nüéâ Migraci√≥n completada exitosamente!")
        print("\nüìã Resumen de cambios:")
        print("   ‚Ä¢ Tabla model_pricing creada con precios actualizados")
        print("   ‚Ä¢ Tabla user_facebook_accounts creada para relaciones many-to-many")
        print("   ‚Ä¢ Tabla analysis_results creada para almacenar an√°lisis")
        print("   ‚Ä¢ Campos de tracking agregados a conversation_history")
        print("   ‚Ä¢ Columnas duplicadas eliminadas de api_cache y facebook_accounts")
        print("   ‚Ä¢ Datos existentes migrados correctamente")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error durante la migraci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

def main():
    """Funci√≥n principal."""
    print("Migraci√≥n de Base de Datos - Ads Analyzer")
    print("Este script implementar√° todas las mejoras de la base de datos.")
    print()
    
    # Verificar que estamos en el directorio correcto
    if not os.path.exists("docs/internal/queries/migration_complete.sql"):
        print("‚ùå Error: Ejecuta este script desde el directorio ra√≠z del proyecto")
        sys.exit(1)
    
    # Confirmar antes de ejecutar
    response = input("¬øContinuar con la migraci√≥n? (y/N): ")
    if response.lower() != 'y':
        print("Migraci√≥n cancelada.")
        sys.exit(0)
    
    # Ejecutar migraci√≥n
    success = run_migration()
    
    if success:
        print("\n‚úÖ Migraci√≥n exitosa. Puedes continuar usando la aplicaci√≥n.")
        print("\nüîß Pr√≥ximos pasos:")
        print("   1. Ejecutar: python test/test_database_migration.py")
        print("   2. Probar la aplicaci√≥n con POSTs consecutivos")
        print("   3. Verificar que la memoria a corto plazo funciona")
    else:
        print("\n‚ùå Migraci√≥n fall√≥. Revisa los errores y vuelve a intentar.")
        sys.exit(1)

if __name__ == "__main__":
    main()
